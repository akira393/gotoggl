project_name: gotoggl
env:
  - GO111MODULE=on
before:
  hooks:
    - go mod tidy
builds:
  - main: main.go
    binary: gotoggl
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
    ldflags:
      - -s -w
      - -X github.com/akira393/gotoggl/cmd.Version={{.Version}}
      - -X github.com/akira393/gotoggl/cmd.Revision={{.ShortCommit}}
      - -X github.com/akira393/gotoggl/cmd.BuildTag={{.Tag}}
    env:
      - CGO_ENABLED=0
archives:
  - name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'
    replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      386: i386
      amd64: x86_64
    format_overrides:
      - goos: windows
        format: zip
changelog:
  # Set it to true if you wish to skip the changelog generation.
  # This may result in an empty release notes on GitHub/GitLab/Gitea.
  # skip: true

  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author login to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog.
  # - `github-native`: uses the GitHub release notes generation API.
  #
  # Defaults to `git`.
  use: git

  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Default is empty
  sort: asc

  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Proving no regex means all commits will be grouped under the default group.
  # Default is no groups.
  # groups:
  #   - title: Features
  #     regexp: "^.*feat[(\\w)]*:+.*$"
  #     order: 0
  #   - title: 'Bug fixes'
  #     regexp: "^.*fix[(\\w)]*:+.*$"
  #     order: 1
  #   - title: Others
  #     order: 999
  filters:
    exclude:
      - '^docs'
      - '^test'
      - '^chore'
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
      - go mod tidy
      - '^style'

# .goreleaser.yml
release:
  # Repo in which the release will be created.
  # Default is extracted from the origin remote URL or empty if its private hosted.
  # github:
  #   owner: user
  #   name: repo

  # IDs of the archives to use.
  # Defaults to all.
  # ids:
  #   - foo
  #   - bar

  # If set to true, will not auto-publish the release.
  # Default is false.
  # draft: true

  # If set, will create a release discussion in the category specified.
  #
  # Warning: do not use categories in the 'Announcement' format.
  #  Check https://github.com/goreleaser/goreleaser/issues/2304 for more info.
  #
  # Default is empty.
  # discussion_category_name: General

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # What to do with the release notes in case there the release already exists.
  #
  # Valid options are:
  # - `keep-existing`: keep the existing notes
  # - `append`: append the current release notes to the existing notes
  # - `prepend`: prepend the current release notes to the existing notes
  # - `replace`: replace existing notes
  #
  # Default is `keep-existing`.
  # mode: append

  # Header template for the release body.
  # Defaults to empty.
  header: |
    ## Same time ({{ .Date }})

    Welcome to this new release!

  # Footer template for the release body.
  # Defaults to empty.
  footer: |
    ## Thanks!

    Those were the changes on {{ .Tag }}!

  # You can change the name of the release.
  # Default is `{{.Tag}}` on OSS and `{{.PrefixedTag}}` on Pro.
  # name_template: "{{.ProjectName}}-v{{.Version}} {{.Env.USER}}"

  # You can disable this pipe in order to not upload any artifacts.
  # Defaults to false.
  # disable: true

  # You can add extra pre-existing files to the release.
  # The filename on the release will be the last part of the path (base).
  # If another file with the same name exists, the last one found will be used.
  # These globs can also include templates.
  #
  # Defaults to empty.
  # extra_files:
  #   - glob: ./path/to/file.txt
  #   - glob: ./glob/**/to/**/file/**/*
  #   - glob: ./glob/foo/to/bar/file/foobar/override_from_previous
  #   - glob: ./single_file.txt
  #     name_template: file.txt # note that this only works if glob matches 1 file only